{
  "hash": "6fe8fdabb687752ac6e5b0ef0d0745f5",
  "result": {
    "markdown": "---\ntitle: \"강신성(202014107).html\"\noutput: html_notebook\n---\n\n\n------------------------------------------------homework 2------------------------------------------------\n\n## We learned the following R code in class. Answer the following questions using this code.\n\n------------------------example: Scatter Plot------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn<-1000\nx<-4+rnorm(n,mean=1,sd=5)\ny<-1+2*x+rnorm(n,mean=0,sd=4)\n\ndev.new()\nplot(x,y, pch=16, col=\"blue\", \n     main=expression(paste(\"Sampling under \", beta[0], \n                           \"=1\", \" \", \"and\", \" \", beta[1], \"=2\")))\ntext(10, 2, \"scatter plot\", cex=1.5)\nabline(a=1,b=2, col=\"red\", lwd=3)\n```\n:::\n\n\n------------------------------------------------------------------------\n\n### **question 1: Compute the mean values of x and y using \"for loop\"!**\n\n**Do not use built-in functions!!!**\n\n-   평균을 내주는 함수 : `mean_values()` 정의\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_values <- function(values) {\n  output <- 0\n  \n  for (i in values) {\n    output <- output + i\n  }\n\n  output / length(values)   ## 평균을 구하기 위해 자료의 수(length)로 나누어준다.\n}\n\nmean_values(x)   ## x의 평균을 계산\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.063285\n```\n:::\n\n```{.r .cell-code}\nmean_values(y)   ## y의 평균을 계산\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11.18455\n```\n:::\n:::\n\n\n### **question 2: Compute the covariance between x and y using \"for loop\"!**\n\n**Do not use built-in functions!!!**\n\n-   공분산을 내주는 함수 : `cov_values()` 정의\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncov_values <- function(data_1, data_2) {\n  x_diff <- data_1 - mean_values(data_1)   ## 위에서 정의했던 함수 \"mean_values()\" 사용\n  y_diff <- data_2 - mean_values(data_2)\n\n  xy_product <- x_diff * y_diff\n  \n  product_sum <- 0\n  \n  for (i in xy_product) {\n    product_sum <- product_sum + i\n  }\n  \n  cov = product_sum / length(xy_product)\n  \n  cov\n}\n\ncov_values(x,y)   ## output\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 47.40633\n```\n:::\n:::\n\n\n### **question 3: Compute the variance x using \"for loop\"!**\n\n**Do not use built-in functions!!!**\n\n-   분산을 내어주는 함수 : var_values() 정의\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar_values <- function(values) {\n  x_diff_sq <- (values - mean_values(values))^2   ## 위에서 정의했던 함수 \"mean_values()\" 사용하여 차의 제곱 행렬 생성\n  \n  sum_x_sq <- 0\n  \n  for (i in x_diff_sq) {\n    sum_x_sq <- sum_x_sq + i\n  }\n  \n  var_x <- sum_x_sq / length(values)  ## 자료의 수로 나누어 분산 산출\n  \n  var_x\n}\n\nvar_values(x)     ## output\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 23.59972\n```\n:::\n:::\n\n\n### **question 4: Compute the parameter beta[1] (slope of the regression line)!**\n\n-   최소제곱법으로 beta[1]의 값을 추정해보자\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbeta_1_hat <- cov_values(x, y) / var_values(x)  ## 위에서 정의한 함수를 사용 : x와 y의 공분산 / x의 분산\n\nbeta_1_hat  ## output\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.008767\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}